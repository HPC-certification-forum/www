/*
Copyright (c) 2018 Nathanael HÃ¼bbe
Copyright (c) 2019 Julian Kunkel

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE. */
kBase64Chars = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_";

function makeId(a) {
	for (var b = "", c = 0; c < a; c += 6) b += kBase64Chars.charAt(Math.floor(Math.random() * kBase64Chars.length));
	return b
}

function pushIfTruthy(a, b) {
	b && a.push(b)
}

function isDenseArrayOfStrings(a) {
	if (!$.isArray(a)) return !1;
	for (var b = a.length; b--;)
		if ("string" != typeof a[b]) return !1;
	return !0
};

function HoverBox(a, b) {
	var c = document.createElement("div");
	this.domElement = c;
	this.enabled = !0;
	this.deferredShowNode = null;
	c.setAttribute("hidden", "");
	c.style.position = "absolute";
	c.style.top = "0px";
	c.style.left = "0px";
	c.setAttribute("z-index", "" + b);
	c.innerHTML = "hoverBox";
	c.addEventListener("mouseleave", function(a) {
		c.setAttribute("hidden", "")
	});
	a.appendChild(c)
}
HoverBox.prototype = {
	show: function(a) {
		this.enabled ? this.show_internal(a) : this.deferredShowNode = a
	},
	hide: function() {
		this.domElement.setAttribute("hidden", "")
	},
	enable: function() {
		this.enabled = !0;
		this.deferredShowNode && this.show_internal(this.deferredShowNode)
	},
	disable: function() {
		this.hide();
		this.enabled = !1
	},
	clearDeferred: function() {
		this.deferredShowNode = null
	},
	show_internal: function(a) {
		this.domElement.setAttribute("hidden", "");
		this.domElement.setAttribute("class", a.nodeDOM.getAttribute("class") + " Details");
		this.domElement.style.top = a.nodeDOM.offsetTop - a.nodeDOM.offsetParent.scrollTop + "px";
		this.domElement.style.left = a.nodeDOM.offsetLeft - a.nodeDOM.offsetParent.scrollLeft + "px";
		this.domElement.innerHTML = a.nodeDOM.innerHTML + '<hr class="TitleDivider">' + a.meta.skillHtmlDescription();

    if(a.children.length != 0){
  		this.domElement.onclick = function(b) {
  			skillTreeObjects().disableHoverBox();
  			a.toggleCollapse()
  		};
    }else{
      this.domElement.onclick = function(b) {};
    }
		this.domElement.removeAttribute("hidden");
		this.clearDeferred()
	}
};
(function() {
	Menu = function(a, b) {
		var c = this;
		this.container = document.createElement("div");
		this.dropButton = document.createElement("div");
		this.menuPane = document.createElement("ul");
		this.opened = !1;
		this.container.setAttribute("class", "menu-container");
		this.dropButton.innerHTML = b;
		this.dropButton.setAttribute("class", "menu-toggle");
		this.dropButton.addEventListener("mouseenter", function(a) {
			c.dropButton.classList.add("hover")
		});
		this.dropButton.addEventListener("mouseleave", function(a) {
			c.dropButton.classList.remove("hover")
		});
		this.dropButton.addEventListener("click", function(a) {
			c.opened ? c.menuPane.setAttribute("hidden", "") : c.menuPane.removeAttribute("hidden");
			c.opened = !c.opened
		});
		this.menuPane.setAttribute("hidden", "");
		this.menuPane.setAttribute("class", "menu-body");
		this.container.appendChild(this.dropButton);
		this.container.appendChild(this.menuPane);
		a.appendChild(this.container)
	};
	Menu.prototype = {
		setTitle: function(a) {
			this.dropButton.innerHTML = a
		},
		addItem: function(a, b, c) {
			var d = this,
				e = document.createElement("li");
			e.innerHTML =
				a;
			e.addEventListener("mouseenter", function(a) {
				e.classList.add("hover")
			});
			e.addEventListener("mouseleave", function(a) {
				e.classList.remove("hover")
			});
			e.addEventListener("click", function(a) {
				d.opened = !1;
				d.menuPane.setAttribute("hidden", "");
				e.classList.remove("hover");
				b(c)
			});
			this.menuPane.appendChild(e)
		},
		addSeparator: function() {},
		clear: function() {
			for (var a; a = this.menuPane.lastChild;) this.menuPane.removeChild(a)
		},
		show: function() {
			this.dropButton.removeAttribute("style")
		},
		hide: function() {
			this.dropButton.setAttribute("style",
				"display: none")
		}
	}
})();
(function() {
	var a = function(a, c) {
		var d = document.createElement("div");
		d.setAttribute("z-index", "" + c);
		a && a.appendChild(d);
		return d
	};
	skillTreeObjects = function() {
		kTreeContainerId = makeId(128);
		var b = function() {
			this.views = {}
		};
		b.prototype = {
			addView: function(a, b) {
				this.views[a] = b;
				this.curViewName ? this.displayViewMenu() : this.setCurView(a)
			},
			setCurView: function(a) {
				if (!this.views[a]) return !1;
				this.curViewName && this.treeContainer && this.treeContainer.classList.remove("view_" + this.curViewName);
				this.curViewName = a;
				this.displayTree();
				return !0
			},
			curView: function() {
				return this.views[this.curViewName]
			},
			setContainer: function(b) {
				if (this.treeContainer) console.log("Error: skillTreeObjects().setContainer() called twice\n");
				else {
					this.viewSelector = new Menu(b, "views");
					var c = a(null, 0);
					c.style.position = "relative";
					c.className = "SkillTree";
					this.treeContainer = a(c, 0);
					this.treeContainer.setAttribute("id", kTreeContainerId);
					this.hoverBox = new HoverBox(c, 1);
					b.appendChild(c);
					this.displayTree()
				}
			},
			disableHoverBox: function() {
				this.hoverBox.disable()
			},
			enableHoverBox: function() {
				this.hoverBox.enable()
			},
			displayViewMenu: function() {
				if (this.treeContainer && this.curViewName) {
					this.viewSelector.clear();
					this.viewSelector.setTitle(this.curViewName);
					var a = function(a) {
							return function(b) {
								a.setCurView(b)
							}
						}(this),
						c = 0,
						b;
					for (b in this.views) this.viewSelector.addItem(b, a, b), c++;
					1 < c ? this.viewSelector.show() : this.viewSelector.hide();
					this.treeContainer.classList.add("view_" + this.curViewName)
				}
			},
			displayTree: function() {
				if (this.treeContainer && this.curViewName) {
					this.displayViewMenu();
					var a = this.curView().makeTreantNodeStructure();
					this.tree = new Treant({
						chart: {
							container: "#" + kTreeContainerId,
							rootOrientation: "WEST",
							node: {
								collapsable: !0
							},
							animateOnInit: !1,
							animation: {
								nodeAnimation: "linear",
								nodeSpeed: 300,
								connectorsAnimation: "linear",
								connectorsSpeed: 300
							},
							callback: {
								onCreateNode: function(a, b) {
									b.addEventListener("mouseenter", function(b) {
										skillTreeObjects().hoverBox.show(a)
									});
									b.addEventListener("mouseleave", function(a) {
										skillTreeObjects().hoverBox.clearDeferred()
									})
								},
								onToggleCollapseFinished: function(a, b) {
									skillTreeObjects().enableHoverBox()
								}
							}
						},
						nodeStructure: a
					})
				}
			}
		};
		var c = new b;
		return function() {
			return c
		}
	}()
})();

function Skill(a) {
	this.id = a;
	this.lists = {};
	this.relevances = {};
	this.isDummy = !0
}
Skill.prototype = {
	constructor: Skill(),
	setCoreData: function(a, b, c) {
		if (!this.isDummy) return "attempt to redefine core data of skill '" + this.name + "' (" + this.id + ")";
		if ("string" != typeof a) return "name of skill '" + this.id + "' is not a string value";
		if ("string" != typeof b) return "level of skill '" + this.id + "' is not a string value";
		this.name = a;
		this.level = b;
		this.isDummy = !1;
		return ""
	},
	addToListAttribute: function(a,
		b) {
		this.lists[a] || (this.lists[a] = []);
		Array.isArray(b) ? this.lists[a] = this.lists[a].concat(b) : this.lists[a].push(b)
	},
	addRelevance: function(a, b, c) {
		if ("string" != typeof a) return "relevance class is not a string";
		if ("string" != typeof b) return "relevance object is not a string";
		if ("string" != typeof c) return "relevance level is not a string";
		this.relevances[a] || (this.relevances[a] = {});
		if (this.relevances[a][b]) return this.relevances[a][b] != c ? "conflicting relevance definitions for '" + a + "'/'" + b + "' for skill '" + this.id +
			"'" : "";
		this.relevances[a][b] = c;
		return ""
	},
	getName: function() {
		return this.isDummy ? "" : this.id + ": " + this.name
	},
	listAttributeHtmlDescription: function(a, b, hidden=false, itemize=true) {
		if (this.lists[a]) {
			var c = "";
      if (! hidden) c = '<p class="Heading">' + b + ':</p>\n';
      if (! itemize){
        c += "<p>";
        for (d in this.lists[a]) c += "\t" + this.lists[a][d] + "\n";
        c += "</p>";
        return c;
      }

      c = c + '<ul class="Text">\n';
			for (d in this.lists[a]) c += "\t<li>" + this.lists[a][d] + "</li>\n";
			c += "</ul>\n"
		}
		return c
	},
	relevanceAttributeHtmlDescription: function(a, b) {
		if (!this.relevances[a]) return "";
		var c = '<p class="Heading">Relevant for ' + b + ':</p>\n<p class="Text">',
			d = !0,
			e;
		for (e in this.relevances[a]) d ? d = !1 : c += ", ", c += e + " (" + this.relevances[a][e] + ")";
		return d ? "" : c
	},
	listRelevances: function() {
		var a = [],
			b;
		for (b in this.relevances)
			for (var c in this.relevances[b]) a.push(b + "_" + c + "_" + this.relevances[b][c]);
		return a
	},
	skillHtmlDescription: function() {
		var a = [];
		pushIfTruthy(a, this.listAttributeHtmlDescription("background", "Background"));
		pushIfTruthy(a, this.listAttributeHtmlDescription("description", "Description"));
		pushIfTruthy(a, this.relevanceAttributeHtmlDescription("Domain", "Domains"));
		pushIfTruthy(a, this.relevanceAttributeHtmlDescription("Role",
			"Roles"));
		pushIfTruthy(a, this.listAttributeHtmlDescription("links", "Links", true, false));
		var b = "",
			c;
		for (c in a) 0 != c && (b += '<hr class="Divider">\n'), b += a[c];
		return b
	}
};

function SkillList() {
	this.list = {};
	this.tree = null;
	this.initialTreantDepth = 1
}
SkillList.prototype = {
	constructor: SkillList(),
	loadFiles: function(a, b) {
		(function(c) {
			var d = b.length,
				e = "",
				f = function(b) {
					b && (e += b + "\n");
					d--;
					0 == d && a(e)
				},
				g;
			for (g in b)(function(a) {
				$.ajax({
					url: a,
					dataType: "json",
					mimeType: "application/json",
					success: function(a) {
						f(c.ingestData(a))
					},
					error: function(b, c, d) {
						f("error while loading file from '" + a + "':\nstatus = " + c + "\nerror = " + d + "\n")
					}
				})
			})(b[g])
		})(this)
	},
	makeTreantNodeStructure: function(a, b, c) {
		if (!b) {
			if (!this.tree) return "tree structure of skills has not been defined yet";
			a = this.tree.keys().next().value;
			b = this.tree.get(a);
			c = 0
		}
		var d = this.produceSkill(a);
		if (!d.getName()) return "no data for skill ID '" + a + "' found";
		a = d.listRelevances().join(" ");
		var e = [],
			f = null,
			g = this;
		b.forEach(function(a, b) {
			"string" != typeof f && (f = g.makeTreantNodeStructure(b, a, c + 1));
			"string" != typeof f && e.push(f)
		});
    if(e.length == 0)
      return "string" == typeof f ? f : {
  			text: {
  				name: d.getName()
  			},
  			meta: d,
  			HTMLclass: "empty"
  		}
    else
		return "string" == typeof f ? f : {
			text: {
				name: d.getName()
			},
			meta: d,
			children: e,
			collapsed: c >= this.initialTreantDepth,
			HTMLclass: a
		}
	},
	produceSkill: function(a) {
		this.list[a] || (this.list[a] = new Skill(a));
		return this.list[a]
	},
	ingestData: function(a) {
		if (Array.isArray(a)) {
			for (var b in a) {
				var c = this.ingestData(a[b]);
				if (c) return c
			}
			return ""
		}
		a.define || (a.define = "list items");
		switch (a.define) {
			case "list items":
				return this.ingestListItems(a);
			case "core data":
				return this.ingestCoreData(a);
			case "relevance":
				return this.ingestRelevance(a);
			case "tree":
				return this.ingestTree(a)
		}
		return "unknown 'define' attribute: '" + a.define + "'"
	},
	ingestListItems: function(a) {
		if (!a.attribute) return "'list items' skill descriptor is missing 'attribute' attribute";
		if (a.data) {
			for (var b in a.data) {
				var c = a.data[b];
				skill = this.produceSkill(b).addToListAttribute(a.attribute, c)
			}
			return ""
		}
		if (!a.skill) return "'list items' skill descriptor is missing 'skill' attribute";
		if (!a.value) return "'list items' skill descriptor is missing 'value' attribute";
		skill = this.produceSkill(a.skill).addToListAttribute(a.attribute, a.value);
		return ""
	},
	ingestCoreData: function(a) {
		if (!a.id) return "'core data' skill descriptor is missing 'id' attribute";
		if (!a.name) return "'core data' skill descriptor is missing 'name' attribute";
		if (!a.level) return "'core data' skill descriptor is missing 'level' attribute";
		skill = this.produceSkill(a.id);
		return skill.setCoreData(a.name, a.level)
	},
	ingestRelevance: function(a) {
		if (!a.type) return "'relevance' skill descriptor is missing 'type' attribute";
		if (!a.name) return "'relevance' skill descriptor is missing 'name' attribute";
		if (!a.skills) return "'relevance' skill descriptor is missing 'skills' attribute";
		for (var b in a.skills)
			if (skill = this.produceSkill(b), relevanceLevel = a.skills[b], error = skill.addRelevance(a.type, a.name, relevanceLevel)) return error;
		return ""
	},
	ingestTree: function(a) {
		if (!a.tree) return "'tree' skill descriptor is missing 'tree' attribute";
		if (this.tree) return "redefinition of skill tree structure";
		this.tree = this.sortTree(a.tree);
		return ""
	},
	sortTree: function(a) {
		var b = [],
			c;
		for (c in a) b.push([c, this.sortTree(a[c])]);
		b.sort(function(a, b) {
			return a[0].localeCompare(b[0])
		});
		return new Map(b)
	}
};
window.SkillTreeViewer = function(a, b) {
	var c = $(a)[0],
		d = function(a) {
			var b = skillTreeObjects();
			b.setContainer(c);
			for (var d in a) {
				var e = new SkillList;
				(function(a, c, d) {
					c.loadFiles(function(d) {
						d ? console.log("error while loading view '" + a + "': " + d) : b.addView(a, c)
					}, d)
				})(d, e, a[d])
			}
		},
		e = function(a, d, e) {
			c.innerHTML = "error while loading file from '" + b + "':<br>status = " + d + "<br>error = " + e
		};
	"string" == typeof b ? $.ajax({
		url: b,
		dataType: "json",
		mimeType: "application/json",
		success: d,
		error: e
	}) : d(b)
};
